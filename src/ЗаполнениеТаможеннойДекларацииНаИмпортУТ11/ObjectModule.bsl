#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Обработка заполнения документа ""Таможенная декларация на импорт"" по файлу XML жестко заданной структуры""'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Версия = "0.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Назначение.Добавить("Документ.ТаможеннаяДекларацияНаИмпорт");
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""Полное наименование"" (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьПолноеНаименование";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	
	// См. реализацию команды в процедуре ДобавитьПрефиксКНаименованию модуля формы обработки.
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Заполнить по файлу XML'");
	Команда.Идентификатор = "ЗаполнитьПоФайлуXML";
	Команда.Использование = "ОткрытиеФормы";
	Команда.ПоказыватьОповещение = Ложь;
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексная очистка (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ОчиститьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Ложь;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля формы обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексное заполнение (вызов клиентской процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""ИНН"" не записывая объект (заполнение формы)'");
	//Команда.Идентификатор = "ЗаполнитьИНН";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыЗаполнениеФормы();
	//Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ОбъектыНазначения    - Массив - Ссылки объектов, для которых вызвана команда.
//       - Неопределено - для команд "ЗаполнениеФормы".
//   ПараметрыВыполнения  - Структура - Контекст выполнения команды.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	//ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	Если ИдентификаторКоманды = "ЗаполнитьПоФайлуXML" Тогда
		ЗаполнитьПоФайлуXML(ОбъектыНазначения, ПараметрыВыполнения);
	//Если ИдентификаторКоманды = "ЗаполнитьИНН" Тогда
	//	ЗаполнитьИНН(ПараметрыВыполнения.ЭтаФорма);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьПолноеНаименование" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Ложь);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьВсе" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ДобавитьПрефиксКНаименованию" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Ложь, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ОчиститьВсе" Тогда
	//	ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИдентификаторКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	//// Имитация длительной операции.
	//Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик команд ЗаполнитьПоФайлуXML
Процедура ЗаполнитьПоФайлуXML(ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	Если ОбъектыНазначения.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не выбраны документы для заполнения'");
	КонецЕсли;
		
	Ошибки = Новый Массив;
	
	
	ДанныеXML = РазобратьXMLФабрикаXDTO(ПараметрыВыполнения.ПутьКФайлуНаСервере);
		
	// Заполнение объектов
	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
		
		//Если ЗаполнятьНаименование Тогда
		//	Если Не ПустаяСтрока(ОбъектНазначения.НаименованиеПолное) Тогда
		//		Ошибки.Добавить(
		//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//				НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
		//				Строка(ОбъектНазначения)));
		//	Иначе
		//		ОбъектНазначения.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//			НСтр("ru = 'Полное наименование заполнено %1'"),
		//			Строка(ТекущаяДатаСеанса()));
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если ДобавлятьПрефикс Тогда
		//	ОбъектНазначения.Наименование = "ПР " + ОбъектНазначения.Наименование;
		//КонецЕсли;
		
		ОбъектНазначения.Записать();
	КонецЦикла;
		
	Для Каждого иДокумент Из ДанныеXML Цикл
		ЗаголовокОповещения = НСтр("ru = 'Заполнены данные:'");
		Для Каждого иРеквизит Из иДокумент Цикл
			Если ЗначениеЗаполнено(иРеквизит.Значение) Тогда 
				ЗаголовокОповещения = ЗаголовокОповещения + Символы.ПС + иРеквизит.Ключ;
			КонецЕсли;
		КонецЦикла;
		Прервать; // в данном случае массив всегда из одного элемента т.к. заполняем единственный документ
	КонецЦикла;
	
	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
	
КонецПроцедуры

Функция РазобратьXMLФабрикаXDTO(ИмяФайлаНаСервере)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаНаСервере);
	
	// Использование фабрики XDTO без привлечения XDTO пакетов 
	
	
	ГТД_XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// предполагаем, что файл имеет жесткую структуру и описывает только одну ГТД
	
	РезультатРазборки = Новый Массив;	
	
	ДокументГТД = Новый Структура("НомерДекларации, ТаможенныйСбор, Товары, Разделы", "", 0, Новый Массив, Новый Массив);
	
	НомерГТД = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc.DocBody.Signature.Object.GTDoutCustomsMark.GTDID.CustomsCode
		+ "/" + ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc.DocBody.Signature.Object.GTDoutCustomsMark.GTDID.RegistrationDate // это дата
		+ "/" + ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc.DocBody.Signature.Object.GTDoutCustomsMark.GTDID.GTDNumber;
		
	ИтоговыйТаможенныйСбор =
		ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUPayments.ESADout_CUCustomsPayment.PaymentAmount; // искать тут код 1010 
		
	РазделыГТД 	= ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[2].DocBody.Signature.Object.DTSout_CU.DTSout_CUGoodsCustomsCost;
	Если ТипЗнч(РазделыГТД) <> Тип("СписокXDTO") Тогда 
		СписокРазделыГТД = Новый Массив;
		СписокРазделыГТД.Добавить(РазделыГТД);
	Иначе
		СписокРазделыГТД = РазделыГТД;
	КонецЕсли;
	Для Каждого иСтрокаРаздела Из СписокРазделыГТД Цикл
		
	КонецЦикла;
	
	ТоварыРаздела = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUGoods.GoodsGroupDescription;
	Если ТипЗнч(ТоварыРаздела) <> Тип("СписокXDTO") Тогда 
		СписокТоварыРаздела = Новый Массив;
		СписокТоварыРаздела.Добавить(ТоварыРаздела);
	Иначе
		СписокТоварыРаздела = ТоварыРаздела;
	КонецЕсли;
	Для Каждого иСтрокаТовара Из СписокТоварыРаздела Цикл
		
	КонецЦикла;
			
	ПошлиныПоСтрокамРаздела = 
		ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUGoods.ESADout_CUCustomsPaymentCalculation;  // искать тут код 2010 
		
	НДСПоСтрокамРаздела = 
		ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUGoods.ESADout_CUCustomsPaymentCalculation;  // искать тут код 5010 
		
		
	РезультатРазборки.Добавить(ДокументГТД);		
	
	//Если ТипЗнч(ПриходыXDTO.ПриходныйОрдер) <> Тип("СписокXDTO") Тогда 
	//	СписокXDTOПриходныйОрдер = Новый Массив;
	//	СписокXDTOПриходныйОрдер.Добавить(ПриходыXDTO.ПриходныйОрдер);
	//Иначе
	//	СписокXDTOПриходныйОрдер = ПриходыXDTO.ПриходныйОрдер;
	//КонецЕсли;
	// 
	//Для Каждого ПриходныйОрдерXDTO ИЗ СписокXDTOПриходныйОрдер Цикл
	//	ДокументПриходныйОрдер = Новый Структура("Номер,Дата,Поставщик,Состав");
	//	
	//	ДокументПриходныйОрдер.Номер = ПриходныйОрдерXDTO.Номер;
	//	ДокументПриходныйОрдер.Дата = XMLЗначение(Тип("Дата"),ПриходныйОрдерXDTO.Дата);
	//	ДокументПриходныйОрдер.Поставщик = ПриходныйОрдерXDTO.Поставщик;
	//	
	//	ДокументПриходныйОрдер.Состав = Новый Массив;
	//	
	//	Если ТипЗнч(ПриходныйОрдерXDTO.Состав.СтрокаСостава) <> Тип("СписокXDTO") Тогда 
	//		СписокXDTOСтрокаСостава = Новый Массив;
	//		СписокXDTOСтрокаСостава.Добавить(ПриходныйОрдерXDTO.Состав.СтрокаСостава);
	//	Иначе
	//		СписокXDTOСтрокаСостава = ПриходныйОрдерXDTO.Состав.СтрокаСостава;
	//	КонецЕсли;
	//	Для Каждого СтрокаСоставаXDTO Из СписокXDTOСтрокаСостава Цикл 
	//		СтрокаСоставаСтруктура = Новый Структура("Номенклатура,Количество");
	//		СтрокаСоставаСтруктура.Номенклатура = СтрокаСоставаXDTO.Номенклатура;
	//		СтрокаСоставаСтруктура.Количество = XMLЗначение(Тип("Число"),СтрокаСоставаXDTO.Количество);
	//		ДокументПриходныйОрдер.Состав.Добавить(СтрокаСоставаСтруктура);
	//	КонецЦикла;

	//	РезультатРазборки.Добавить(ДокументПриходныйОрдер);
	//	
	//КонецЦикла;
	 
	Возврат РезультатРазборки;
	
КонецФункции

Процедура ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки = Неопределено)
	
	Всего = ОбъектыНазначения.Количество();
	Ошибок = ?(Ошибки <> Неопределено, Ошибки.Количество(), 0);
	Заполнено = Всего - Ошибок;
	
	Если Всего = 1 Тогда
		Если Ошибок > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибки[0];
			Сообщение.Поле = "Объект.Номер";
			Сообщение.Сообщить();
		Иначе
			СсылкаЭлемента = ОбъектыНазначения[0];
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаголовокОповещения;
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Ошибок = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Обработано'")
			+ " "
			+ СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Всего,
				НСтр("ru = 'объект,объекта,объектов'"));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОповещения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего объектов: %1
			|Успешно заполнено: %2
			|Ошибок: %3'"),
		Формат(Всего,     "ЧН=0; ЧГ=0"),
		Формат(Заполнено, "ЧН=0; ЧГ=0"), 
		Формат(Ошибок,    "ЧН=0; ЧГ=0"));
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Кратко;
	Сообщение.Сообщить();
	
	Подробно = "";
	Для Каждого ТекстОшибки Из Ошибки Цикл
		Подробно = Подробно + "---" + Символы.ПС + Символы.ПС + ТекстОшибки + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка заполнения таможенной декларации на импорт'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.ТаможеннаяДекларацияНаИмпорт,
		,
		Подробно);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Архив

//// Обработчик команды.
//Процедура ЗаполнитьИНН(Форма)
//	
//	Генератор = Новый ГенераторСлучайныхЧисел;
//	
//	Форма.Объект.ИНН = Формат(Генератор.СлучайноеЧисло(1, 999999999), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
//	Форма.Модифицированность = Истина;
//	
//	Сообщение = Новый СообщениеПользователю;
//	Сообщение.Текст = НСтр("ru = 'Поле ""ИНН"" заполнено.'");
//	Сообщение.Поле = "ИНН";
//	Сообщение.Сообщить();
//	
//КонецПроцедуры

//// Обработчик команд ЗаполнитьПолноеНаименование, ДобавитьПрефиксКНаименованию, ЗаполнитьВсе и ОчиститьВсе.
//Процедура ЗаполнитьКонтрагентов(ОбъектыНазначения, ЗаполнятьНаименование, ДобавлятьПрефикс) Экспорт
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для заполнения'");
//	КонецЕсли;
//	
//	Ошибки = Новый Массив;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		
//		Если ЗаполнятьНаименование Тогда
//			Если Не ПустаяСтрока(ОбъектНазначения.НаименованиеПолное) Тогда
//				Ошибки.Добавить(
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//						НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
//						Строка(ОбъектНазначения)));
//			Иначе
//				ОбъектНазначения.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Полное наименование заполнено %1'"),
//					Строка(ТекущаяДатаСеанса()));
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ДобавлятьПрефикс Тогда
//			ОбъектНазначения.Наименование = "ПР " + ОбъектНазначения.Наименование;
//		КонецЕсли;
//		
//		ОбъектНазначения.Записать();
//	КонецЦикла;
//	
//	Если ЗаполнятьНаименование И ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Наименование и префикс заполнены'");
//	ИначеЕсли ЗаполнятьНаименование Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Полное наименование заполнено'");
//	ИначеЕсли ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Добавлен префикс к краткому наименованию'");
//	КонецЕсли;
//	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
//	
//КонецПроцедуры

//// Обработчик команды ОчиститьВсе.
//Процедура ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения) 
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для очистки реквизитов'");
//	КонецЕсли;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		ОбъектНазначения.Наименование = СтрЗаменить(ОбъектНазначения.Наименование, "ПР ", "");
//		ОбъектНазначения.НаименованиеПолное = "";
//		ОбъектНазначения.ИНН = "";
//		ОбъектНазначения.Записать();
//		
//	КонецЦикла;
//	
//	ВывестиОповещение(ОбъектыНазначения, НСтр("ru = 'Наименование и префикс очищены'"));
//	
//КонецПроцедуры

#КонецОбласти

#КонецЕсли
