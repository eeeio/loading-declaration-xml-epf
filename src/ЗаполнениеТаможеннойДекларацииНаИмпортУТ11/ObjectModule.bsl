#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Обработка заполнения документа ""Таможенная декларация на импорт"" по файлу XML жестко заданной структуры""'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Версия = "0.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Назначение.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""Полное наименование"" (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьПолноеНаименование";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	
	// См. реализацию команды в процедуре ДобавитьПрефиксКНаименованию модуля формы обработки.
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Заполнить по файлу XML'");
	Команда.Идентификатор = "ЗаполнитьПоФайлуXML";
	Команда.Использование = "ОткрытиеФормы";
	Команда.ПоказыватьОповещение = Ложь;
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексная очистка (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ОчиститьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Ложь;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля формы обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексное заполнение (вызов клиентской процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""ИНН"" не записывая объект (заполнение формы)'");
	//Команда.Идентификатор = "ЗаполнитьИНН";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыЗаполнениеФормы();
	//Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ОбъектыНазначения    - Массив - Ссылки объектов, для которых вызвана команда.
//       - Неопределено - для команд "ЗаполнениеФормы".
//   ПараметрыВыполнения  - Структура - Контекст выполнения команды.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	//ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	Если ИдентификаторКоманды = "ЗаполнитьПоФайлуXML" Тогда
		ЗаполнитьПоФайлуXML(ОбъектыНазначения, ПараметрыВыполнения);
	//Если ИдентификаторКоманды = "ЗаполнитьИНН" Тогда
	//	ЗаполнитьИНН(ПараметрыВыполнения.ЭтаФорма);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьПолноеНаименование" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Ложь);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьВсе" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ДобавитьПрефиксКНаименованию" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Ложь, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ОчиститьВсе" Тогда
	//	ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИдентификаторКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	//// Имитация длительной операции.
	//Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик команд ЗаполнитьПоФайлуXML
Процедура ЗаполнитьПоФайлуXML(ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	Если ОбъектыНазначения.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не выбраны документы для заполнения'");
	КонецЕсли;
	
	Ошибки 	= Новый Массив;
	// образец добавления ошибки
	//		Ошибки.Добавить(
	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//				НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
	//				Строка(ОбъектНазначения)));
	
	ЗаголовокОповещения = ""; 	
	
	ДанныеXML = РазобратьXMLФабрикаXDTO(ПараметрыВыполнения.АдресХранилищаФайла);
	
	// Заполнение объектов
	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
				
		Для Каждого иДокумент Из ДанныеXML Цикл
			
			ЗаполнитьЗначенияСвойств(ОбъектНазначения, иДокумент, "НомерДекларации, ТаможенныйСбор");
			
			Если Ложь Тогда 
				ОбъектНазначения = Документы.ТаможеннаяДекларацияИмпорт.СоздатьДокумент();
			КонецЕсли;
			
			ОбъектНазначения.Разделы.Очистить();
			Для Каждого иРаздел Из иДокумент.Разделы Цикл
				НоваяСтрокаРазделов 					= ОбъектНазначения.Разделы.Добавить();
				//НоваяСтрокаРазделов.НомерДляСФ 		= ;
				НоваяСтрокаРазделов.НомерРаздела 		= иРаздел.НомерРаздела;
				//НоваяСтрокаРазделов.Склад 			= ;
				НоваяСтрокаРазделов.СтавкаНДС 			= ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(иРаздел.СтавкаНДС);
				НоваяСтрокаРазделов.СтавкаПошлины 		= Число(?(ЗначениеЗаполнено(иРаздел.СтавкаПошлины), иРаздел.СтавкаПошлины, 0));
				НоваяСтрокаРазделов.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(иРаздел.СтранаПроисхождения, Истина);
				НоваяСтрокаРазделов.СуммаНДС 			= иРаздел.СуммаНДС;
				НоваяСтрокаРазделов.СуммаПошлины 		= иРаздел.СуммаПошлины;
				НоваяСтрокаРазделов.ТаможеннаяСтоимость = иРаздел.ТаможеннаяСтоимость;
			КонецЦикла;
			
			Если иДокумент.Товары.Количество() = 0 Тогда 
				// это странно - тут должны были быть товары... не будем ничего делать!
				//Для Каждого иТовар Из иДокумент.Товары Цикл
				//	НоваяСтрокаТоваров 								= ОбъектНазначения.Товары.Добавить();
				//	//НоваяСтрокаТоваров.АналитикаУчетаНоменклатуры 	= ;
				//	//НоваяСтрокаТоваров.ВидЗапасов 					= ;
				//	НоваяСтрокаТоваров.ДокументПоступления 			= Неопределено;
				//	//НоваяСтрокаТоваров.ЗакупкаПодДеятельность 		= ;
				//	//НоваяСтрокаТоваров.Количество 					= ;
				//	//НоваяСтрокаТоваров.КоличествоУпаковок 			= ;
				//	//НоваяСтрокаТоваров.Назначение					= ;
				//	//НоваяСтрокаТоваров.Номенклатура 				= ;
				//	НоваяСтрокаТоваров.НомерГТД 					= ОбъектНазначения.НомерДекларации;
				//	//НоваяСтрокаТоваров.НомерДляСФ 					= ;
				//	//НоваяСтрокаТоваров.НомерРаздела 				= ;
				//	//НоваяСтрокаТоваров.Серия 						= ;
				//	//НоваяСтрокаТоваров.Склад 						= ;
				//	//НоваяСтрокаТоваров.СтатусУказанияСерий 			= ;
				//	//НоваяСтрокаТоваров.СтранаПроисхождения 			= ;
				//	//НоваяСтрокаТоваров.СуммаНДС 					= ;
				//	//НоваяСтрокаТоваров.СуммаПошлины 				= ;
				//	//НоваяСтрокаТоваров.ТаможеннаяСтоимость 			= ;
				//	//НоваяСтрокаТоваров.Упаковка 					= ;
				//	//НоваяСтрокаТоваров.Характеристика 				= ;
				//	//НоваяСтрокаТоваров.ХозяйственнаяОперация 		= ;					
				//КонецЦикла;
			Иначе
				// нужно попытаться распределить существующие товары по разделам (по сумме легко, если она совпадает и уникальна)
				// проставить НомерГТД из шапки документа + номер товара/раздела (могли перезаполнить)
				
				мсвНоменклатура = ОбъектНазначения.Товары.ВыгрузитьКолонку("Номенклатура");
				Для Каждого иСтрокаТЧТовары Из ОбъектНазначения.Товары Цикл
					иСтрокаТЧТовары.НомерРаздела = 0;
				КонецЦикла;	
				Для Каждого иСтрокаТовара Из иДокумент.Товары Цикл

					// 1. ищем количество ?  		(КоличествоУпаковок, Упаковка)
					// 2. ищем по наименованию? 	(Номенклатура)
					// 3. ищем по артикулу?     	(Артикул)
					// 4. ищем по производителю? 	(Производитель)
					// 5. помещаем найденную строку ТЧ в текущий раздел (НомерРаздела)
					
					// ...
					
				КонецЦикла;
			КонецЕсли;  			
			
			ЗаголовокОповещения = НСтр("ru = 'Заполнены данные:'");
			Для Каждого иРеквизит Из иДокумент Цикл
				Если ЗначениеЗаполнено(иРеквизит.Значение) Тогда 
					ЗаголовокОповещения = ЗаголовокОповещения + Символы.ПС + иРеквизит.Ключ;
				КонецЕсли;   				
			КонецЦикла;
			
			Прервать; // в данном случае массив ДанныеXML всегда из одного элемента т.к. заполняем единственный документ
		КонецЦикла;
		
		ОбъектНазначения.Записать();
		
		Прервать; // в данном случае массив ОбъектыНазначения всегда из одного элемента т.к. заполняем единственный документ
	КонецЦикла;
		
	
	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
	
КонецПроцедуры

Функция РазобратьXMLФабрикаXDTO(АдресХранилищаФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ФайлXML = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);	
	
	Поток = ФайлXML.ОткрытьПотокДляЧтения();	
	//Чтение = новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток); 	
	//ЧтениеXML.ОткрытьФайл(ФайлXML);
	
	// Использование фабрики XDTO без привлечения XDTO пакетов 
	
	
	ГТД_XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// предполагаем, что файл имеет жесткую структуру и описывает только одну ГТД
	
	РезультатРазборки = Новый Массив;	
	
	КодТаможенныйСбор 	= "1010";
	КодПошлина 			= "2010";
	КодНДС 				= "5010";
	//КодТаможенныйШтраф	= ?; 
	
	ДокументГТД = Новый Структура("НомерДекларации, ТаможенныйСбор, ТаможенныйШтраф, Товары, Разделы", "", 0, 0, Новый Массив, Новый Массив);
	
	ДокументГТД.НомерДекларации = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.CustomsCode
	+ "/" + Формат(Дата(СтрЗаменить(ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.RegistrationDate,"-","")), "ДФ=ddMMyyyy")
	+ "/" + ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.GTDNumber;
	
	СтранаПроисхождения = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.OriginCountryName;
	
	ПошлиныИСборы = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUPayments.ESADout_CUCustomsPayment;
	Если ТипЗнч(ПошлиныИСборы) <> Тип("СписокXDTO") Тогда 
		СписокПошлиныИСборы = Новый Массив;
		СписокПошлиныИСборы.Добавить(ПошлиныИСборы);
	Иначе
		СписокПошлиныИСборы = ПошлиныИСборы;
	КонецЕсли;
	Для Каждого иСтрокаПошлиныИСборы Из СписокПошлиныИСборы Цикл
		Если иСтрокаПошлиныИСборы.PaymentModeCode = КодТаможенныйСбор Тогда 
			ДокументГТД.ТаможенныйСбор = ДокументГТД.ТаможенныйСбор + Число(иСтрокаПошлиныИСборы.PaymentAmount);
		КонецЕсли;
	КонецЦикла;
	
	//РазделыГТД 	= ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[2].DocBody.Signature.Object.DTSout_CU.DTSout_CUGoodsCustomsCost;
	РазделыГТД = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUGoods;
	Если ТипЗнч(РазделыГТД) <> Тип("СписокXDTO") Тогда 
		СписокРазделыГТД = Новый Массив;
		СписокРазделыГТД.Добавить(РазделыГТД);
	Иначе
		СписокРазделыГТД = РазделыГТД;
	КонецЕсли;
	Для Каждого иСтрокаРаздела Из СписокРазделыГТД Цикл
		СтрокаРазделаСтруктура = Новый Структура(
		"НомерДляСФ, НомерРаздела, Склад, СтавкаНДС, 
		|СтавкаПошлины, СтранаПроисхождения, СуммаНДС, СуммаПошлины, ТаможеннаяСтоимость");
		
		СуммаПошлиныРаздела 	= 0;
		СуммаНДСРаздела 		= 0;
		СтавкаПошлиныРаздела 	= "";
		СтавкаНДСРаздела 		= "";
		ПошлиныИСборыРаздела = иСтрокаРаздела.ESADout_CUCustomsPaymentCalculation;
		Если ТипЗнч(ПошлиныИСборыРаздела) <> Тип("СписокXDTO") Тогда 
			СписокПошлиныИСборыРаздела = Новый Массив;
			СписокПошлиныИСборыРаздела.Добавить(ПошлиныИСборыРаздела);
		Иначе
			СписокПошлиныИСборыРаздела = ПошлиныИСборыРаздела;
		КонецЕсли;
		Для Каждого иСтрокаПошлиныИСборы Из СписокПошлиныИСборыРаздела Цикл
			Если иСтрокаПошлиныИСборы.PaymentModeCode = КодПошлина Тогда 
				СуммаПошлиныРаздела 	= СуммаПошлиныРаздела + Число(иСтрокаПошлиныИСборы.PaymentAmount);
				СтавкаПошлиныРаздела 	= иСтрокаПошлиныИСборы.Rate;
			ИначеЕсли иСтрокаПошлиныИСборы.PaymentModeCode = КодНДС Тогда 
				СуммаНДСРаздела 		= СуммаНДСРаздела + Число(иСтрокаПошлиныИСборы.PaymentAmount);
				СтавкаНДСРаздела 		= иСтрокаПошлиныИСборы.Rate;
			КонецЕсли;
		КонецЦикла;
		
		//СтрокаРазделаСтруктура.НомерДляСФ 		= иСтрокаРаздела.SheetGoodsSerialNumber; ?
		СтрокаРазделаСтруктура.НомерРаздела 		= Число(иСтрокаРаздела.GoodsNumeric); //GTDGoodsNumber;
		//СтрокаРазделаСтруктура.Склад 				= ;
		СтрокаРазделаСтруктура.СтавкаНДС 			= СтавкаНДСРаздела;
		СтрокаРазделаСтруктура.СтавкаПошлины 		= СтавкаПошлиныРаздела;
		СтрокаРазделаСтруктура.СтранаПроисхождения 	= СтранаПроисхождения;
		СтрокаРазделаСтруктура.СуммаНДС 			= СуммаНДСРаздела;
		СтрокаРазделаСтруктура.СуммаПошлины 		= СуммаПошлиныРаздела;
		СтрокаРазделаСтруктура.ТаможеннаяСтоимость 	= Число(иСтрокаРаздела.CustomsCost); //NationalDeclaredCustomsCost;
		
		ДокументГТД.Разделы.Добавить(СтрокаРазделаСтруктура);
		
		ТоварыРаздела = иСтрокаРаздела.GoodsGroupDescription;
		Если ТипЗнч(ТоварыРаздела) <> Тип("СписокXDTO") Тогда 
			СписокТоварыРаздела = Новый Массив;
			СписокТоварыРаздела.Добавить(ТоварыРаздела);
		Иначе
			СписокТоварыРаздела = ТоварыРаздела;
		КонецЕсли;
		Для Каждого иСтрокаТовара Из СписокТоварыРаздела Цикл
			СтрокаТовараСтруктура = Новый Структура("НомерРаздела, КоличествоУпаковок, Номенклатура, Упаковка, Производитель, Артикул, Отработкано");
			//"АналитикаУчетаНоменклатуры, ВидЗапасов, ДокументПоступления, ЗакупкаПодДеятельность, 
			//"Количество, КоличествоУпаковок, Назначение, Номенклатура,
			//|НомерГТД, НомерДляСФ, НомерРаздела, Серия,
			//|Склад, СтатусУказанияСерий, СтранаПроисхождения, СуммаНДС,
			//|СуммаПошлины, ТаможеннаяСтоимость, Упаковка, Характеристика, ХозяйственнаяОперация");
			
			//СтрокаТовараСтруктура.Количество 			= иСтрокаТовара.GoodsGroupQuantity.GoodsQuantity;
			СтрокаТовараСтруктура.КоличествоУпаковок 	= Число(иСтрокаТовара.GoodsGroupInformation.GoodsGroupQuantity.GoodsQuantity);
			//СтрокаТовараСтруктура.Назначение 			= ;
			СтрокаТовараСтруктура.Номенклатура 			= иСтрокаТовара.GoodsDescription;
			//СтрокаТовараСтруктура.НомерГТД 			= ;
			//СтрокаТовараСтруктура.НомерДляСФ 			= ;
			СтрокаТовараСтруктура.НомерРаздела 			= Число(иСтрокаРаздела.GoodsNumeric);
			//СтрокаТовараСтруктура.Серия 				= ;
			//СтрокаТовараСтруктура.Склад 				= ;
			//СтрокаТовараСтруктура.СтатусУказанияСерий = ;
			//СтрокаТовараСтруктура.СтранаПроисхождения = СтранаПроисхождения;
			//СтрокаТовараСтруктура.СуммаНДС 			= ;
			//СтрокаТовараСтруктура.СуммаПошлины 		= ;
			//СтрокаТовараСтруктура.ТаможеннаяСтоимость = ;
			СтрокаТовараСтруктура.Упаковка 				= иСтрокаТовара.GoodsGroupInformation.GoodsGroupQuantity.MeasureUnitQualifierCode; // лучше код, а не имя, как в MeasureUnitQualifierName;
			//СтрокаТовараСтруктура.Характеристика 		= ;
			//СтрокаТовараСтруктура.ХозяйственнаяОперация = ;
			СтрокаТовараСтруктура.Производитель 		= иСтрокаТовара.GoodsGroupInformation.TradeMark;
			СтрокаТовараСтруктура.Артикул 				= иСтрокаТовара.GoodsGroupInformation.GoodsModel;
			СтрокаТовараСтруктура.Отработкано			= Ложь;
			
			ДокументГТД.Товары.Добавить(СтрокаТовараСтруктура);
			
		КонецЦикла;				
	КонецЦикла; 	
	
	РезультатРазборки.Добавить(ДокументГТД);		
	
	Возврат РезультатРазборки;
	
КонецФункции

Процедура ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки = Неопределено)
	
	Всего = ОбъектыНазначения.Количество();
	Ошибок = ?(Ошибки <> Неопределено, Ошибки.Количество(), 0);
	Заполнено = Всего - Ошибок;
	
	Если Всего = 1 Тогда
		Если Ошибок > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибки[0];
			Сообщение.Поле = "Объект.Номер";
			Сообщение.Сообщить();
		Иначе
			СсылкаЭлемента = ОбъектыНазначения[0];
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаголовокОповещения;
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Ошибок = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Обработано'")
			+ " "
			+ СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Всего,
				НСтр("ru = 'объект,объекта,объектов'"));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОповещения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего объектов: %1
			|Успешно заполнено: %2
			|Ошибок: %3'"),
		Формат(Всего,     "ЧН=0; ЧГ=0"),
		Формат(Заполнено, "ЧН=0; ЧГ=0"), 
		Формат(Ошибок,    "ЧН=0; ЧГ=0"));
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Кратко;
	Сообщение.Сообщить();
	
	Подробно = "";
	Для Каждого ТекстОшибки Из Ошибки Цикл
		Подробно = Подробно + "---" + Символы.ПС + Символы.ПС + ТекстОшибки + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка заполнения таможенной декларации на импорт'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.ТаможеннаяДекларацияИмпорт,
		,
		Подробно);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Архив

//// Обработчик команды.
//Процедура ЗаполнитьИНН(Форма)
//	
//	Генератор = Новый ГенераторСлучайныхЧисел;
//	
//	Форма.Объект.ИНН = Формат(Генератор.СлучайноеЧисло(1, 999999999), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
//	Форма.Модифицированность = Истина;
//	
//	Сообщение = Новый СообщениеПользователю;
//	Сообщение.Текст = НСтр("ru = 'Поле ""ИНН"" заполнено.'");
//	Сообщение.Поле = "ИНН";
//	Сообщение.Сообщить();
//	
//КонецПроцедуры

//// Обработчик команд ЗаполнитьПолноеНаименование, ДобавитьПрефиксКНаименованию, ЗаполнитьВсе и ОчиститьВсе.
//Процедура ЗаполнитьКонтрагентов(ОбъектыНазначения, ЗаполнятьНаименование, ДобавлятьПрефикс) Экспорт
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для заполнения'");
//	КонецЕсли;
//	
//	Ошибки = Новый Массив;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		
//		Если ЗаполнятьНаименование Тогда
//			Если Не ПустаяСтрока(ОбъектНазначения.НаименованиеПолное) Тогда
//				Ошибки.Добавить(
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//						НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
//						Строка(ОбъектНазначения)));
//			Иначе
//				ОбъектНазначения.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Полное наименование заполнено %1'"),
//					Строка(ТекущаяДатаСеанса()));
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ДобавлятьПрефикс Тогда
//			ОбъектНазначения.Наименование = "ПР " + ОбъектНазначения.Наименование;
//		КонецЕсли;
//		
//		ОбъектНазначения.Записать();
//	КонецЦикла;
//	
//	Если ЗаполнятьНаименование И ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Наименование и префикс заполнены'");
//	ИначеЕсли ЗаполнятьНаименование Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Полное наименование заполнено'");
//	ИначеЕсли ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Добавлен префикс к краткому наименованию'");
//	КонецЕсли;
//	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
//	
//КонецПроцедуры

//// Обработчик команды ОчиститьВсе.
//Процедура ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения) 
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для очистки реквизитов'");
//	КонецЕсли;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		ОбъектНазначения.Наименование = СтрЗаменить(ОбъектНазначения.Наименование, "ПР ", "");
//		ОбъектНазначения.НаименованиеПолное = "";
//		ОбъектНазначения.ИНН = "";
//		ОбъектНазначения.Записать();
//		
//	КонецЦикла;
//	
//	ВывестиОповещение(ОбъектыНазначения, НСтр("ru = 'Наименование и префикс очищены'"));
//	
//КонецПроцедуры

#КонецОбласти

#КонецЕсли
